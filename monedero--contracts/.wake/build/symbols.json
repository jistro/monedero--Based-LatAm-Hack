{"contracts": ["VersionedInitializable", "IERC20Detailed", "IFlashLoanReceiver", "ReserveConfiguration", "Errors", "UserConfiguration", "PercentageMath", "IVariableDebtToken", "Address", "IAaveIncentivesController", "IERC721Errors", "BridgeLogic", "IReserveInterestRateStrategy", "GPv2SafeERC20", "IncentivizedERC20", "IsolationModeLogic", "Pool", "IPoolAddressesProvider", "SupplyLogic", "ISwapRouter", "SafeCast", "DataTypes", "IERC20Metadata", "IAccessControl", "mUSDC", "IPriceOracleGetter", "ValidationLogic", "WadRayMath", "IStaking", "IERC20Errors", "ReentrancyGuard", "IInitializableDebtToken", "IPool", "Staking", "IPriceOracleSentinel", "IAToken", "FlashLoanLogic", "MathUtils", "IUniswapV3SwapCallback", "EModeConfiguration", "IACLManager", "IScaledBalanceToken", "EModeLogic", "GenericLogic", "PoolLogic", "IInitializableAToken", "PoolStorage", "IFlashLoanSimpleReceiver", "Context", "LiquidationLogic", "BorrowLogic", "TransferHelper", "ReserveLogic", "IERC1155Errors", "IERC20", "TriggeredSwaps", "ERC20", "IERC20WithPermit"], "enums": ["InterestRateMode"], "canonical_enums": ["DataTypes.InterestRateMode"], "errors": ["ERC721InvalidReceiver", "ERC20InvalidSpender", "ERC721NonexistentToken", "TransferFailed", "ERC721InvalidSender", "ERC1155MissingApprovalForAll", "ERC1155InvalidOperator", "ERC1155InvalidApprover", "ERC721InvalidOperator", "ApproveFailed", "ReentrancyGuardReentrantCall", "NotEnoughBalance", "ERC20InvalidApprover", "ERC1155InvalidArrayLength", "ERC20InsufficientBalance", "ERC1155InsufficientBalance", "ERC1155InvalidReceiver", "ERC721InvalidOwner", "ERC20InvalidReceiver", "ERC20InvalidSender", "ERC721InsufficientApproval", "ERC1155InvalidSender", "NotTimeToClaimYet", "Unauthorized", "ERC721InvalidApprover", "UserHasNotEnoughmUSDC", "NotEnoughAllowance", "ERC721IncorrectOwner", "ERC20InsufficientAllowance", "OrderAlreadyCanceled", "AccessDenied"], "canonical_errors": ["IERC1155Errors.ERC1155InvalidArrayLength", "IERC721Errors.ERC721NonexistentToken", "ReentrancyGuard.ReentrancyGuardReentrantCall", "IERC721Errors.ERC721IncorrectOwner", "IERC20Errors.ERC20InvalidSender", "IERC721Errors.ERC721InvalidApprover", "IERC20Errors.ERC20InsufficientAllowance", "IERC1155Errors.ERC1155InvalidOperator", "IERC1155Errors.ERC1155InvalidSender", "Staking.NotEnoughAllowance", "IERC20Errors.ERC20InvalidApprover", "TriggeredSwaps.TransferFailed", "IERC20Errors.ERC20InsufficientBalance", "IERC721Errors.ERC721InvalidOperator", "mUSDC.Unauthorized", "TriggeredSwaps.UserHasNotEnoughmUSDC", "TriggeredSwaps.NotTimeToClaimYet", "Staking.NotEnoughBalance", "Staking.TransferFailed", "TriggeredSwaps.OrderAlreadyCanceled", "IERC1155Errors.ERC1155InvalidApprover", "IERC1155Errors.ERC1155MissingApprovalForAll", "Staking.Unauthorized", "TriggeredSwaps.AccessDenied", "IERC721Errors.ERC721InvalidOwner", "IERC20Errors.ERC20InvalidSpender", "IERC1155Errors.ERC1155InvalidReceiver", "IERC721Errors.ERC721InsufficientApproval", "IERC721Errors.ERC721InvalidReceiver", "IERC20Errors.ERC20InvalidReceiver", "IERC721Errors.ERC721InvalidSender", "IERC1155Errors.ERC1155InsufficientBalance", "Staking.ApproveFailed"], "events": ["AddressSet", "PriceOracleUpdated", "RoleGranted", "ACLManagerUpdated", "Initialized", "PoolConfiguratorUpdated", "RoleAdminChanged", "ProxyCreated", "Supply", "Approval", "Repay", "Burn", "PoolDataProviderUpdated", "IsolationModeTotalDebtUpdated", "Mint", "MarketIdSet", "SequencerOracleUpdated", "PriceOracleSentinelUpdated", "PoolUpdated", "ACLAdminUpdated", "BackUnbacked", "UserEModeSet", "Transfer", "ReserveDataUpdated", "FlashLoan", "ReserveUsedAsCollateralDisabled", "Borrow", "ReserveUsedAsCollateralEnabled", "MintUnbacked", "LiquidationCall", "MintedToTreasury", "AddressSetAsProxy", "RoleRevoked", "Withdraw", "BalanceTransfer", "GracePeriodUpdated"], "canonical_events": ["IPool.Supply", "BridgeLogic.MintUnbacked", "LiquidationLogic.LiquidationCall", "IScaledBalanceToken.Mint", "IPriceOracleSentinel.GracePeriodUpdated", "BridgeLogic.BackUnbacked", "IPoolAddressesProvider.AddressSetAsProxy", "IPoolAddressesProvider.ProxyCreated", "EModeLogic.UserEModeSet", "LiquidationLogic.ReserveUsedAsCollateralDisabled", "SupplyLogic.Withdraw", "IPool.MintedToTreasury", "IPool.ReserveUsedAsCollateralDisabled", "IPriceOracleSentinel.SequencerOracleUpdated", "IAccessControl.RoleRevoked", "IERC20.Approval", "IPool.ReserveUsedAsCollateralEnabled", "IPool.FlashLoan", "IPoolAddressesProvider.ACLManagerUpdated", "PoolLogic.MintedToTreasury", "IPoolAddressesProvider.PriceOracleUpdated", "LiquidationLogic.ReserveUsedAsCollateralEnabled", "FlashLoanLogic.FlashLoan", "IPoolAddressesProvider.AddressSet", "IAccessControl.RoleGranted", "ReserveLogic.ReserveDataUpdated", "BorrowLogic.ReserveUsedAsCollateralDisabled", "IPoolAddressesProvider.MarketIdSet", "SupplyLogic.ReserveUsedAsCollateralEnabled", "IAToken.BalanceTransfer", "IPoolAddressesProvider.PriceOracleSentinelUpdated", "IInitializableDebtToken.Initialized", "IAccessControl.RoleAdminChanged", "SupplyLogic.ReserveUsedAsCollateralDisabled", "BorrowLogic.IsolationModeTotalDebtUpdated", "IsolationModeLogic.IsolationModeTotalDebtUpdated", "IPool.BackUnbacked", "IPool.Borrow", "IPoolAddressesProvider.ACLAdminUpdated", "IPool.UserEModeSet", "PoolLogic.IsolationModeTotalDebtUpdated", "IInitializableAToken.Initialized", "IScaledBalanceToken.Burn", "IPool.Repay", "IPool.LiquidationCall", "IPoolAddressesProvider.PoolConfiguratorUpdated", "BorrowLogic.Borrow", "IPoolAddressesProvider.PoolUpdated", "IPool.MintUnbacked", "SupplyLogic.Supply", "BorrowLogic.Repay", "BridgeLogic.ReserveUsedAsCollateralEnabled", "IPoolAddressesProvider.PoolDataProviderUpdated", "IERC20.Transfer", "IPool.Withdraw", "IPool.ReserveDataUpdated", "IPool.IsolationModeTotalDebtUpdated"], "functions": ["getProposedMasterWallet", "getScaledUserBalanceAndSupply", "getUserAccountData", "_makeTriggerOrder", "isEmpty", "getUserData", "toUint64", "isBorrowAllowed", "isBridge", "syncIndexesState", "getLiquidationProtocolFee", "cumulateToLiquidityIndex", "setACLManager", "stakingUSDC", "claim_Apy", "propose_masterWallet", "toInt64", "setPoolConfiguratorImpl", "setSupplyCap", "getFlags", "getEModeCategoryData", "getUnstaking24HoursAdminList", "exactOutput", "setUsingAsCollateral", "initialize", "_msgData", "functionCallWithValue", "toInt16", "rayMul", "claimNewStakingContractAddress", "getReserveNormalizedIncome", "remove_ProposeUnstaking24HoursAdmin", "_accrueToTreasury", "BASE_CURRENCY", "getLastUnstakingProcessTime", "getApy", "getLtv", "_msgSender", "getLiquidationBonus", "toInt256", "setPoolDataProvider", "backUnbacked", "isBorrowingOne", "getProposedUSDCAddress", "increaseAllowance", "cancel_USDCAddress", "validateSupply", "getACLManager", "getMarketId", "cancelPropose_mUSDCAddress", "cancelTrigger", "verifyCallResult", "_onlyPoolAdmin", "getDecimals", "UNDERLYING_ASSET_ADDRESS", "getSupplyLogic", "propose_swapRouterAddress", "wadDiv", "getRevision", "executeRescueTokens", "isEmergencyAdmin", "calculateCompoundedInterest", "_nonReentrantBefore", "deposit", "handleRepayment", "executeDropReserve", "executeOperation", "isPoolAdmin", "transfer", "getFlashLoanLogic", "setPriceOracle", "getStakingAddress", "decreaseAllowance", "getParams", "toUint96", "validateSetUseReserveAsCollateral", "getEModeCategoryBorrowableBitmap", "executeInitReserve", "FLASHLOAN_PREMIUM_TOTAL", "getUserConfiguration", "BASE_CURRENCY_UNIT", "_approve", "validateTransfer", "propose_mUSDCAddress", "getFrozen", "functionStaticCall", "validateAutomaticUseAsCollateral", "propose_USDCAddress", "scaledTotalSupply", "setConfiguration", "validateSetUserEMode", "approve", "cancel_ProposeUSDCAddress", "propose_MasterWallet", "uniswapV3SwapCallback", "executeSetLiquidationGracePeriod", "toUint16", "getProposedAavePool", "updateState", "getPoolLogic", "initReserve", "setAddressAsProxy", "_transfer", "getAddress", "allowance", "getPriceOracle", "wadMul", "_onlyBridge", "getProposedApy", "wadToRay", "claim_USDCAddress", "_burnDebtTokens", "getActive", "isLiquidationAllowed", "_burnCollateralATokens", "repay", "_setName", "propose_StakingAddress", "getLiquidationGracePeriod", "borrow", "isUsingAsCollateralOrBorrowing", "setDecimals", "isFlashBorrower", "getPoolFee", "isBorrowingAny", "getLiquidationLogic", "transferUnderlyingTo", "getBorrowingEnabled", "safeApprove", "getProposedTimeToClaimAavePool", "setLiquidationThreshold", "setReserveBitmapBit", "cancel_ProposeApy", "_getFirstAssetIdByMask", "mintUnbacked", "validateFlashloan", "setPaused", "scaledBalanceOf", "removePoolAdmin", "executeGetUserAccountData", "_setSymbol", "revokeRole", "setBorrowCap", "configureEModeCategoryCollateralBitmap", "toInt8", "_hookTransferYieldUpdate", "burn", "transferFrom", "getAavePool", "toUint224", "triggerOrder", "getIncentivesController", "getNormalizedDebt", "swapExactOutputSingle", "ADDRESSES_PROVIDER", "isUsingAsCollateral", "addPoolAdmin", "getVirtualUnderlyingBalance", "setUserEMode", "cancel_StakingAddress", "cancel_swapRouterAddress", "executeLiquidationCall", "getProposedTimeToClaimApy", "processUnstaking24Hours", "flashLoan", "claimNewAdministratorAddress", "configureEModeCategory", "getLiquidationThreshold", "getProposedmUSDCAddress", "percentMul", "executeSupply", "proposeNewAdministratorAddress", "updateIsolatedDebtIfIsolated", "cancelNewAdministratorAddress", "getReserveDataExtended", "validateUseAsCollateral", "isRiskAdmin", "renounceRole", "setFrozen", "setReserveFactor", "withdraw", "_calculateDebt", "_updateIndexes", "permit", "exactOutputSingle", "getRoleProposedTimeToClaimAdministrator", "RISK_ADMIN_ROLE", "name", "_spendAllowance", "stkingUSDC", "cancel_ProposeAavePool", "BRIDGE_ROLE", "DOMAIN_SEPARATOR", "getBorrowableInIsolation", "burnAndTransferToTriggerSwaps", "syncRatesState", "getProposedTimeToClaimUSDCAddress", "cancel_masterWallet", "_calculateAvailableCollateralToLiquidate", "isUsingAsCollateralOne", "getSwapRouterAddress", "setSequencerOracle", "rescueTokens", "finalizeTransfer", "getPriceOracleSentinel", "removeRiskAdmin", "getIsVirtualAccActive", "safeTransfer", "exactInputSingle", "addAssetListingAdmin", "validateBorrow", "configureEModeCategoryBorrowableBitmap", "mint", "getBridgeLogic", "calculateAvailableBorrows", "setPriceOracleSentinel", "setSiloedBorrowing", "getListPendingUnstaking24Hours", "executeWithdraw", "setMarketId", "ASSET_LISTING_ADMIN_ROLE", "setUnbackedMintCap", "proposeNewTriggeredSwapsAddress", "getReservesList", "getAdministratorAddress", "getNormalizedIncome", "liquidationCall", "getRoleProposedAdministrator", "setFlashLoanEnabled", "flashLoanSimple", "toUint256", "isConstructor", "updateBridgeProtocolFee", "isBorrowing", "removeFlashBorrower", "claim_mUSDCAddress", "getMasterWallet", "setLiquidationBonus", "_update", "validateFlashloanSimple", "validateRepay", "propose_Apy", "setActive", "sendValue", "cancelNewStakingContractAddress", "getPool", "propose_poolFee", "addRiskAdmin", "getGracePeriod", "claim_MasterWallet", "_reentrancyGuardEntered", "toUint32", "setPoolImpl", "executeBorrow", "setBorrowingEnabled", "MAX_NUMBER_RESERVES", "_getUserBalanceInBaseCurrency", "_mint", "isUsingAsCollateralAny", "setInterestRateParams", "getSiloedBorrowing", "hasRole", "init", "getFlashLoanEnabled", "_hookUpdateYield", "cancel_mUSDCAddress", "setGracePeriod", "unstaking24HoursUSDC", "executeRepay", "getSingleOrder", "transferOnLiquidation", "getSiloedBorrowingState", "isContract", "toUint128", "balanceOf", "removeExpired", "validateWithdraw", "cache", "exactInput", "isReserveEnabledOnBitmap", "resetIsolationModeTotalDebt", "executeMintToTreasury", "setLtv", "POOL", "updateInterestRatesAndVirtualBalance", "getReserveFactor", "claim_masterWallet", "supply", "updateFlashloanPremiums", "setLiquidationGracePeriod", "getACLAdmin", "RESERVE_TREASURY_ADDRESS", "getUnbackedMintCap", "BRIDGE_PROTOCOL_FEE", "decimals", "getProposedTimeToClaimmUSDCAddress", "setIncentivesController", "executeBackUnbacked", "cancel_poolFee", "validateHFAndLtv", "_getUserDebtInBaseCurrency", "getUSDCAddress", "toInt32", "dropReserve", "repayWithATokens", "getReserveAddressById", "getBorrowCap", "getEModeLogic", "setDebtCeiling", "_handleFlashLoanRepayment", "validateDropReserve", "getReserveNormalizedVariableDebt", "setAddress", "addEmergencyAdmin", "setRoleAdmin", "isAssetListingAdmin", "getProposedTimeToClaimMasterWallet", "validateHealthFactor", "addBridge", "_onlyPoolConfigurator", "functionCall", "cancelNewTriggeredSwapsAddress", "getEModeCategoryCollateralConfig", "getReserveData", "toUint8", "handleAction", "executeResetIsolationModeTotalDebt", "setVirtualAccActive", "supplyWithPermit", "getDebtCeiling", "getCaps", "calculateUserAccountData", "setBorrowing", "getSequencerOracle", "claim_AavePool", "getReservesCount", "getRoleProposedStakingContract", "cancel_ProposeMasterWallet", "claim_swapRouterAddress", "nonces", "constructor", "flushTrigger", "_setDecimals", "getEModeCategoryCollateralBitmap", "getStakingContractAddress", "functionDelegateCall", "mintToTreasury", "calculateInterestRates", "createTrigger", "executeFlashLoan", "FLASH_BORROWER_ROLE", "percentDiv", "getPreviousIndex", "EMERGENCY_ADMIN_ROLE", "getPoolDataProvider", "setLiquidationProtocolFee", "claimNewTriggeredSwapsAddress", "setBorrowableInIsolation", "calculateLinearInterest", "executeFinalizeTransfer", "getIsolationModeState", "symbol", "removeBridge", "getmUSDCAddress", "rayDiv", "validateLiquidationCall", "unstakingNowUSDC", "setUserUseReserveAsCollateral", "constructorTokens", "grantRole", "executeSetUserEMode", "safeTransferETH", "getRoleProposedTimeToClaimStakingContract", "claim_poolFee", "toInt128", "getEModeCategoryLabel", "executeMintUnbacked", "totalSupply", "getPendingUnstaking24Hours", "POOL_ADMIN_ROLE", "setACLAdmin", "getRoleAdmin", "executeUseReserveAsCollateral", "removeAssetListingAdmin", "getUserEMode", "getAssetPrice", "_liquidateATokens", "rayToWad", "_burn", "add_Unstaking24HoursAdmin", "repayWithPermit", "getBorrowLogic", "_nonReentrantAfter", "safeTransferFrom", "_contextSuffixLength", "removeEmergencyAdmin", "getSupplyCap", "propose_AavePool", "addFlashBorrower", "getLastTransferResult", "getConfiguration", "setReserveInterestRateStrategyAddress", "getPaused", "FLASHLOAN_PREMIUM_TO_PROTOCOL", "getPoolConfigurator", "proposeNewStakingContractAddress", "executeFlashLoanSimple", "claim_StakingAddress", "getOrders"], "canonical_functions": ["ISwapRouter.exactInput(struct ISwapRouter.ExactInputParams)", "Pool.resetIsolationModeTotalDebt(address)", "IPoolAddressesProvider.getPool()", "Staking.getUnstaking24HoursAdminList(address)", "ReserveConfiguration.getBorrowableInIsolation(struct DataTypes.ReserveConfigurationMap)", "ReserveLogic.updateInterestRatesAndVirtualBalance(struct DataTypes.ReserveData,struct DataTypes.ReserveCache,address,uint256,uint256)", "Pool.getEModeCategoryData(uint8)", "IACLManager.addFlashBorrower(address)", "IAToken.permit(address,address,uint256,uint256,uint8,bytes32,bytes32)", "IPoolAddressesProvider.setAddress(bytes32,address)", "IPool.getReservesCount()", "Pool.initialize(contract IPoolAddressesProvider)", "Staking.add_Unstaking24HoursAdmin(address)", "Pool.getEModeLogic()", "IPool.updateBridgeProtocolFee(uint256)", "IERC20Detailed.name()", "Pool.updateFlashloanPremiums(uint128,uint128)", "PercentageMath.percentDiv(uint256,uint256)", "IPool.resetIsolationModeTotalDebt(address)", "ReserveConfiguration.setFlashLoanEnabled(struct DataTypes.ReserveConfigurationMap,bool)", "IPool.repay(address,uint256,uint256,address)", "IAToken.transferUnderlyingTo(address,uint256)", "ValidationLogic.validateBorrow(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),mapping(uint8 => struct DataTypes.EModeCategory),struct DataTypes.ValidateBorrowParams)", "TriggeredSwaps.getSwapRouterAddress()", "TriggeredSwaps.cancel_masterWallet()", "IPool.getConfiguration(address)", "SafeCast.toUint32(uint256)", "IPool.syncIndexesState(address)", "IPool.getUserAccountData(address)", "IPriceOracleSentinel.isLiquidationAllowed()", "IPool.borrow(address,uint256,uint256,uint16,address)", "Pool.getEModeCategoryCollateralConfig(uint8)", "IVariableDebtToken.burn(address,uint256,uint256)", "Staking.claim_mUSDCAddress()", "IStaking.getProposedTimeToClaimApy()", "TriggeredSwaps.propose_masterWallet(address,uint256)", "Staking.burnAndTransferToTriggerSwaps(address,uint256)", "Pool.getUserConfiguration(address)", "IPoolAddressesProvider.getPoolDataProvider()", "TransferHelper.safeTransferFrom(address,address,address,uint256)", "mUSDC.proposeNewTriggeredSwapsAddress(address)", "IPool.deposit(address,uint256,address,uint16)", "IPool.getReserveAddressById(uint16)", "ReserveConfiguration.getLiquidationBonus(struct DataTypes.ReserveConfigurationMap)", "ReserveLogic.getNormalizedDebt(struct DataTypes.ReserveData)", "IERC20.balanceOf(address)", "IncentivizedERC20.allowance(address,address)", "Pool.FLASHLOAN_PREMIUM_TO_PROTOCOL()", "UserConfiguration.setUsingAsCollateral(struct DataTypes.UserConfigurationMap,uint256,bool)", "Staking.cancel_ProposeMasterWallet()", "ValidationLogic.validateLiquidationCall(struct DataTypes.UserConfigurationMap,struct DataTypes.ReserveData,struct DataTypes.ReserveData,struct DataTypes.ValidateLiquidationCallParams)", "ISwapRouter.exactOutput(struct ISwapRouter.ExactOutputParams)", "IPriceOracleSentinel.getSequencerOracle()", "mUSDC._hookTransferYieldUpdate(address,address)", "IPool.getLiquidationGracePeriod(address)", "ReserveConfiguration.getActive(struct DataTypes.ReserveConfigurationMap)", "Staking.getApy()", "IERC20Metadata.symbol()", "LiquidationLogic._calculateAvailableCollateralToLiquidate(struct DataTypes.ReserveData,struct DataTypes.ReserveCache,address,address,uint256,uint256,uint256,contract IPriceOracleGetter)", "Staking.getProposedTimeToClaimAavePool()", "IACLManager.POOL_ADMIN_ROLE()", "MathUtils.calculateCompoundedInterest(uint256,uint40,uint256)", "ReserveConfiguration.getFrozen(struct DataTypes.ReserveConfigurationMap)", "SafeCast.toUint128(uint256)", "mUSDC.getRoleProposedStakingContract()", "IncentivizedERC20.symbol()", "ValidationLogic.validateTransfer(struct DataTypes.ReserveData)", "IPool.setConfiguration(address,struct DataTypes.ReserveConfigurationMap)", "Pool.configureEModeCategoryBorrowableBitmap(uint8,uint128)", "IPoolAddressesProvider.setPriceOracleSentinel(address)", "Pool.getUserEMode(address)", "IPoolAddressesProvider.getPriceOracleSentinel()", "mUSDC.cancelNewTriggeredSwapsAddress()", "ValidationLogic.validateUseAsCollateral(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),struct DataTypes.UserConfigurationMap,struct DataTypes.ReserveConfigurationMap)", "Address.functionDelegateCall(address,bytes,string)", "Address.sendValue(address payable,uint256)", "IACLManager.ASSET_LISTING_ADMIN_ROLE()", "EModeConfiguration.isReserveEnabledOnBitmap(uint128,uint256)", "Staking.propose_MasterWallet(address)", "ValidationLogic.validateSetUserEMode(mapping(uint8 => struct DataTypes.EModeCategory),struct DataTypes.UserConfigurationMap,uint256,uint8)", "Pool.rescueTokens(address,address,uint256)", "Address.functionCall(address,bytes)", "ISwapRouter.exactOutputSingle(struct ISwapRouter.ExactOutputSingleParams)", "IScaledBalanceToken.getScaledUserBalanceAndSupply(address)", "IncentivizedERC20.transfer(address,uint256)", "IPool.finalizeTransfer(address,address,address,uint256,uint256,uint256)", "GenericLogic._getUserDebtInBaseCurrency(address,struct DataTypes.ReserveData,uint256,uint256)", "IAccessControl.hasRole(bytes32,address)", "Pool.syncRatesState(address)", "TriggeredSwaps.getOrders()", "TriggeredSwaps.getPoolFee()", "ReserveConfiguration.setBorrowingEnabled(struct DataTypes.ReserveConfigurationMap,bool)", "VersionedInitializable.isConstructor()", "Address.functionCall(address,bytes,string)", "ValidationLogic.validateHFAndLtv(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),mapping(uint8 => struct DataTypes.EModeCategory),struct DataTypes.UserConfigurationMap,address,address,uint256,address,uint8)", "Pool.getPoolLogic()", "IERC20.transferFrom(address,address,uint256)", "TransferHelper.safeTransferETH(address,uint256)", "IERC20Metadata.decimals()", "IACLManager.isFlashBorrower(address)", "IACLManager.removeAssetListingAdmin(address)", "IACLManager.addEmergencyAdmin(address)", "IACLManager.ADDRESSES_PROVIDER()", "IStaking.getProposedApy()", "IAccessControl.renounceRole(bytes32,address)", "Pool._onlyPoolAdmin()", "IPoolAddressesProvider.getPoolConfigurator()", "LiquidationLogic._burnCollateralATokens(struct DataTypes.ReserveData,struct DataTypes.ExecuteLiquidationCallParams,struct LiquidationLogic.LiquidationCallLocalVars)", "IPriceOracleSentinel.ADDRESSES_PROVIDER()", "ReserveConfiguration.getFlashLoanEnabled(struct DataTypes.ReserveConfigurationMap)", "IACLManager.isAssetListingAdmin(address)", "Pool.updateBridgeProtocolFee(uint256)", "ValidationLogic.validateDropReserve(mapping(uint256 => address),struct DataTypes.ReserveData,address)", "Pool.getReservesList()", "ReserveConfiguration.getCaps(struct DataTypes.ReserveConfigurationMap)", "IReserveInterestRateStrategy.setInterestRateParams(address,bytes)", "Pool.getUserAccountData(address)", "WadRayMath.wadMul(uint256,uint256)", "ERC20.symbol()", "IStaking.getProposedTimeToClaimAavePool()", "IInitializableDebtToken.initialize(contract IPool,address,contract IAaveIncentivesController,uint8,string,string,bytes)", "IAccessControl.getRoleAdmin(bytes32)", "TriggeredSwaps.removeExpired()", "IStaking.getProposedAavePool()", "IInitializableAToken.initialize(contract IPool,address,address,contract IAaveIncentivesController,uint8,string,string,bytes)", "IStaking.getAavePool()", "IPriceOracleSentinel.setSequencerOracle(address)", "Staking.getProposedmUSDCAddress()", "TriggeredSwaps.getMasterWallet()", "IPool.setReserveInterestRateStrategyAddress(address,address)", "ReserveConfiguration.setVirtualAccActive(struct DataTypes.ReserveConfigurationMap,bool)", "TransferHelper.safeApprove(address,address,uint256)", "PoolLogic.executeRescueTokens(address,address,uint256)", "SafeCast.toUint64(uint256)", "TriggeredSwaps.propose_swapRouterAddress(address,uint256)", "UserConfiguration.isUsingAsCollateral(struct DataTypes.UserConfigurationMap,uint256)", "ReserveConfiguration.getFlags(struct DataTypes.ReserveConfigurationMap)", "IPool.getVirtualUnderlyingBalance(address)", "UserConfiguration.isUsingAsCollateralOrBorrowing(struct DataTypes.UserConfigurationMap,uint256)", "IStaking.getProposedTimeToClaimMasterWallet()", "Pool.configureEModeCategory(uint8,struct DataTypes.EModeCategoryBaseConfiguration)", "IStaking.stkingUSDC(uint256)", "SafeCast.toInt128(int256)", "ERC20.name()", "Staking.unstakingNowUSDC(uint256)", "SafeCast.toUint8(uint256)", "IAToken.handleRepayment(address,address,uint256)", "SafeCast.toInt256(uint256)", "ReentrancyGuard.constructor()", "TriggeredSwaps.claim_mUSDCAddress()", "Staking.claim_AavePool()", "Staking.cancel_ProposeAavePool()", "IStaking.getmUSDCAddress()", "IPool.getFlashLoanLogic()", "ReserveConfiguration.getIsVirtualAccActive(struct DataTypes.ReserveConfigurationMap)", "SupplyLogic.executeSupply(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),struct DataTypes.UserConfigurationMap,struct DataTypes.ExecuteSupplyParams)", "IStaking.getProposedMasterWallet()", "ReserveConfiguration.getLtv(struct DataTypes.ReserveConfigurationMap)", "IPoolAddressesProvider.getPriceOracle()", "ReserveConfiguration.setSiloedBorrowing(struct DataTypes.ReserveConfigurationMap,bool)", "Pool._onlyBridge()", "IPool.getEModeCategoryCollateralBitmap(uint8)", "IACLManager.FLASH_BORROWER_ROLE()", "UserConfiguration.getIsolationModeState(struct DataTypes.UserConfigurationMap,mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address))", "IACLManager.isEmergencyAdmin(address)", "IncentivizedERC20.increaseAllowance(address,uint256)", "IAToken.burn(address,address,uint256,uint256)", "PoolLogic.executeDropReserve(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),address)", "Pool.configureEModeCategoryCollateralBitmap(uint8,uint128)", "Pool.deposit(address,uint256,address,uint16)", "Staking.getProposedUSDCAddress()", "Pool.getLiquidationGracePeriod(address)", "ERC20.approve(address,uint256)", "IncentivizedERC20.balanceOf(address)", "ERC20._mint(address,uint256)", "IPool.FLASHLOAN_PREMIUM_TO_PROTOCOL()", "IFlashLoanReceiver.POOL()", "Pool.getBridgeLogic()", "Pool.constructor(contract IPoolAddressesProvider)", "Pool.getSupplyLogic()", "MathUtils.calculateCompoundedInterest(uint256,uint40)", "mUSDC.decimals()", "IPoolAddressesProvider.setPoolImpl(address)", "Pool.getReserveDataExtended(address)", "Address.isContract(address)", "IncentivizedERC20._setSymbol(string)", "mUSDC.getUserData(address)", "ERC20.decimals()", "IncentivizedERC20._setName(string)", "IStaking.getPendingUnstaking24Hours(address)", "SafeCast.toUint96(uint256)", "TriggeredSwaps.cancelTrigger(uint256)", "Staking.unstaking24HoursUSDC(uint256)", "IPool.backUnbacked(address,uint256,uint256)", "BridgeLogic.executeMintUnbacked(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),struct DataTypes.UserConfigurationMap,address,uint256,address,uint16)", "ERC20.transferFrom(address,address,uint256)", "IncentivizedERC20.getIncentivesController()", "TriggeredSwaps.constructor(address,address,address)", "IERC20WithPermit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32)", "Staking.getProposedTimeToClaimApy()", "ValidationLogic.validateWithdraw(struct DataTypes.ReserveCache,uint256,uint256)", "mUSDC.transferFrom(address,address,uint256)", "ReserveConfiguration.setLtv(struct DataTypes.ReserveConfigurationMap,uint256)", "IPool.syncRatesState(address)", "IStaking.getUSDCAddress()", "ReserveLogic._accrueToTreasury(struct DataTypes.ReserveData,struct DataTypes.ReserveCache)", "IERC20Detailed.decimals()", "TriggeredSwaps.cancel_swapRouterAddress()", "ReserveConfiguration.getUnbackedMintCap(struct DataTypes.ReserveConfigurationMap)", "mUSDC._hookUpdateYield(address)", "ERC20._transfer(address,address,uint256)", "ReserveConfiguration.getBorrowingEnabled(struct DataTypes.ReserveConfigurationMap)", "IPool.getUserEMode(address)", "IPool.getSupplyLogic()", "IncentivizedERC20._approve(address,address,uint256)", "IncentivizedERC20.setIncentivesController(contract IAaveIncentivesController)", "TriggeredSwaps.flushTrigger()", "IPool.setUserEMode(uint8)", "IAToken.transferOnLiquidation(address,address,uint256)", "IPoolAddressesProvider.setACLManager(address)", "ReserveConfiguration.setSupplyCap(struct DataTypes.ReserveConfigurationMap,uint256)", "IACLManager.RISK_ADMIN_ROLE()", "PoolLogic.executeResetIsolationModeTotalDebt(mapping(address => struct DataTypes.ReserveData),address)", "IACLManager.EMERGENCY_ADMIN_ROLE()", "mUSDC.claimNewTriggeredSwapsAddress()", "IPool.getEModeLogic()", "IPriceOracleGetter.BASE_CURRENCY()", "IPool.getEModeCategoryLabel(uint8)", "mUSDC.mint(address,uint256,uint256)", "IVariableDebtToken.mint(address,address,uint256,uint256)", "Pool.getReservesCount()", "IReserveInterestRateStrategy.calculateInterestRates(struct DataTypes.CalculateInterestRatesParams)", "IPoolAddressesProvider.setPriceOracle(address)", "Pool.FLASHLOAN_PREMIUM_TOTAL()", "Staking.getUSDCAddress()", "ERC20._burn(address,uint256)", "GPv2SafeERC20.getLastTransferResult(contract IERC20)", "IACLManager.removeEmergencyAdmin(address)", "IAToken.mint(address,address,uint256,uint256)", "Pool.getEModeCategoryLabel(uint8)", "IStaking.unstakingNowUSDC(uint256)", "TriggeredSwaps.propose_StakingAddress(address,uint256)", "FlashLoanLogic.executeFlashLoanSimple(struct DataTypes.ReserveData,struct DataTypes.FlashloanSimpleParams)", "Pool.mintToTreasury(address[])", "Staking.propose_AavePool(address)", "IncentivizedERC20.approve(address,uint256)", "mUSDC.getAdministratorAddress()", "mUSDC.getRoleProposedTimeToClaimAdministrator()", "ERC20._approve(address,address,uint256)", "IPool.mintToTreasury(address[])", "Pool.withdraw(address,uint256,address)", "UserConfiguration._getFirstAssetIdByMask(struct DataTypes.UserConfigurationMap,uint256)", "ReserveConfiguration.getReserveFactor(struct DataTypes.ReserveConfigurationMap)", "Staking.claim_MasterWallet()", "LiquidationLogic._liquidateATokens(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),mapping(address => struct DataTypes.UserConfigurationMap),struct DataTypes.ReserveData,struct DataTypes.ExecuteLiquidationCallParams,struct LiquidationLogic.LiquidationCallLocalVars)", "mUSDC.getRoleProposedAdministrator()", "Pool.flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)", "IACLManager.isPoolAdmin(address)", "IPool.FLASHLOAN_PREMIUM_TOTAL()", "LiquidationLogic._burnDebtTokens(struct DataTypes.ExecuteLiquidationCallParams,struct LiquidationLogic.LiquidationCallLocalVars)", "IStaking.getMasterWallet()", "IPool.getReserveNormalizedIncome(address)", "IPool.flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)", "SafeCast.toInt64(int256)", "EModeConfiguration.setReserveBitmapBit(uint128,uint256,bool)", "IPool.getEModeCategoryBorrowableBitmap(uint8)", "Staking.getMasterWallet()", "mUSDC.approve(address,uint256)", "FlashLoanLogic._handleFlashLoanRepayment(struct DataTypes.ReserveData,struct DataTypes.FlashLoanRepaymentParams)", "Pool.MAX_NUMBER_RESERVES()", "Pool.syncIndexesState(address)", "TriggeredSwaps.cancel_poolFee()", "ReserveConfiguration.setReserveFactor(struct DataTypes.ReserveConfigurationMap,uint256)", "IPoolAddressesProvider.getACLAdmin()", "TriggeredSwaps.claim_StakingAddress()", "ReserveConfiguration.setLiquidationProtocolFee(struct DataTypes.ReserveConfigurationMap,uint256)", "BorrowLogic.executeRepay(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),struct DataTypes.UserConfigurationMap,struct DataTypes.ExecuteRepayParams)", "Staking.propose_USDCAddress(address)", "IACLManager.addRiskAdmin(address)", "IPool.setUserUseReserveAsCollateral(address,bool)", "GenericLogic._getUserBalanceInBaseCurrency(address,struct DataTypes.ReserveData,uint256,uint256)", "ReserveConfiguration.getSupplyCap(struct DataTypes.ReserveConfigurationMap)", "IERC20.allowance(address,address)", "IAToken.rescueTokens(address,address,uint256)", "IPriceOracleGetter.BASE_CURRENCY_UNIT()", "Pool.getReserveNormalizedIncome(address)", "ReserveLogic.cache(struct DataTypes.ReserveData)", "Pool.borrow(address,uint256,uint256,uint16,address)", "mUSDC.proposeNewAdministratorAddress(address)", "Address.functionStaticCall(address,bytes,string)", "Staking.remove_ProposeUnstaking24HoursAdmin(address)", "ReserveConfiguration.setUnbackedMintCap(struct DataTypes.ReserveConfigurationMap,uint256)", "Context._contextSuffixLength()", "IPool.getEModeCategoryData(uint8)", "Staking.getProposedAavePool()", "TransferHelper.safeTransfer(address,address,uint256)", "ISwapRouter.exactInputSingle(struct ISwapRouter.ExactInputSingleParams)", "UserConfiguration.isBorrowingOne(struct DataTypes.UserConfigurationMap)", "Staking.propose_Apy(uint256)", "TriggeredSwaps.claim_masterWallet()", "Address.functionStaticCall(address,bytes)", "ReserveConfiguration.setDebtCeiling(struct DataTypes.ReserveConfigurationMap,uint256)", "MathUtils.calculateLinearInterest(uint256,uint40)", "TriggeredSwaps.triggerOrder(uint256[])", "Staking.constructor(address,uint256,address,address,address)", "IPoolAddressesProvider.setACLAdmin(address)", "IScaledBalanceToken.getPreviousIndex(address)", "IStaking.processUnstaking24Hours()", "IPoolAddressesProvider.getACLManager()", "SupplyLogic.executeUseReserveAsCollateral(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),mapping(uint8 => struct DataTypes.EModeCategory),struct DataTypes.UserConfigurationMap,address,bool,uint256,address,uint8)", "ERC20.transfer(address,uint256)", "UserConfiguration.setBorrowing(struct DataTypes.UserConfigurationMap,uint256,bool)", "IPool.repayWithATokens(address,uint256,uint256)", "mUSDC.constructor(address,address,address)", "Pool.setReserveInterestRateStrategyAddress(address,address)", "IACLManager.removeRiskAdmin(address)", "TriggeredSwaps.getmUSDCAddress()", "IACLManager.BRIDGE_ROLE()", "PoolLogic.executeMintToTreasury(mapping(address => struct DataTypes.ReserveData),address[])", "SupplyLogic.executeWithdraw(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),mapping(uint8 => struct DataTypes.EModeCategory),struct DataTypes.UserConfigurationMap,struct DataTypes.ExecuteWithdrawParams)", "TriggeredSwaps.claim_poolFee()", "UserConfiguration.getSiloedBorrowingState(struct DataTypes.UserConfigurationMap,mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address))", "IACLManager.addPoolAdmin(address)", "IPool.getReserveData(address)", "ReserveConfiguration.setActive(struct DataTypes.ReserveConfigurationMap,bool)", "ERC20.totalSupply()", "ReserveLogic.updateState(struct DataTypes.ReserveData,struct DataTypes.ReserveCache)", "IAToken.DOMAIN_SEPARATOR()", "Pool.getConfiguration(address)", "TriggeredSwaps.swapExactOutputSingle(address,address,uint256,uint256)", "EModeLogic.executeSetUserEMode(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),mapping(uint8 => struct DataTypes.EModeCategory),mapping(address => uint8),struct DataTypes.UserConfigurationMap,struct DataTypes.ExecuteSetUserEModeParams)", "ReentrancyGuard._nonReentrantBefore()", "IncentivizedERC20.totalSupply()", "GenericLogic.calculateUserAccountData(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),mapping(uint8 => struct DataTypes.EModeCategory),struct DataTypes.CalculateUserAccountDataParams)", "mUSDC.claimNewAdministratorAddress()", "ERC20._update(address,address,uint256)", "TriggeredSwaps.propose_poolFee(uint24,uint256)", "Pool.getVirtualUnderlyingBalance(address)", "SafeCast.toInt32(int256)", "IPool.getEModeCategoryCollateralConfig(uint8)", "IFlashLoanSimpleReceiver.executeOperation(address,uint256,uint256,address,bytes)", "ReserveConfiguration.getSiloedBorrowing(struct DataTypes.ReserveConfigurationMap)", "IAccessControl.revokeRole(bytes32,address)", "IPool.MAX_NUMBER_RESERVES()", "IACLManager.isBridge(address)", "SafeCast.toInt16(int256)", "IFlashLoanSimpleReceiver.ADDRESSES_PROVIDER()", "Pool.getLiquidationLogic()", "Pool.getReserveData(address)", "IStaking.getLastUnstakingProcessTime()", "IStaking.unstaking24HoursUSDC(uint256)", "IPool.updateFlashloanPremiums(uint128,uint128)", "IAaveIncentivesController.handleAction(address,uint256,uint256)", "IncentivizedERC20._setDecimals(uint8)", "ReserveConfiguration.getDecimals(struct DataTypes.ReserveConfigurationMap)", "IsolationModeLogic.updateIsolatedDebtIfIsolated(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),struct DataTypes.UserConfigurationMap,struct DataTypes.ReserveCache,uint256)", "Pool.getBorrowLogic()", "GPv2SafeERC20.safeTransferFrom(contract IERC20,address,address,uint256)", "Staking.claim_USDCAddress()", "IAToken.mintToTreasury(uint256,uint256)", "UserConfiguration.isUsingAsCollateralOne(struct DataTypes.UserConfigurationMap)", "IPoolAddressesProvider.setMarketId(string)", "UserConfiguration.isBorrowingAny(struct DataTypes.UserConfigurationMap)", "IERC20Metadata.name()", "WadRayMath.wadDiv(uint256,uint256)", "Staking.cancel_ProposeUSDCAddress()", "Staking.propose_mUSDCAddress(address)", "Staking.getProposedTimeToClaimUSDCAddress()", "IncentivizedERC20.decimals()", "ReserveLogic.cumulateToLiquidityIndex(struct DataTypes.ReserveData,uint256,uint256)", "ReserveConfiguration.setLiquidationThreshold(struct DataTypes.ReserveConfigurationMap,uint256)", "IPool.flashLoanSimple(address,address,uint256,bytes,uint16)", "Pool.getReserveAddressById(uint16)", "Staking.stakingUSDC(uint256)", "SafeCast.toUint16(uint256)", "Staking.getListPendingUnstaking24Hours()", "Staking.getAavePool()", "Address.functionCallWithValue(address,bytes,uint256)", "IScaledBalanceToken.scaledBalanceOf(address)", "mUSDC.transfer(address,uint256)", "Pool.setUserUseReserveAsCollateral(address,bool)", "Pool.getFlashLoanLogic()", "IACLManager.addAssetListingAdmin(address)", "UserConfiguration.isBorrowing(struct DataTypes.UserConfigurationMap,uint256)", "TriggeredSwaps.cancel_USDCAddress()", "Staking.cancel_ProposeApy()", "PoolLogic.executeGetUserAccountData(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),mapping(uint8 => struct DataTypes.EModeCategory),struct DataTypes.CalculateUserAccountDataParams)", "Address.functionDelegateCall(address,bytes)", "Context._msgData()", "IPool.supplyWithPermit(address,uint256,address,uint16,uint256,uint8,bytes32,bytes32)", "ReserveConfiguration.setBorrowableInIsolation(struct DataTypes.ReserveConfigurationMap,bool)", "IPool.initReserve(address,address,address,address)", "Staking.getProposedTimeToClaimmUSDCAddress()", "VersionedInitializable.getRevision()", "ReserveLogic.getNormalizedIncome(struct DataTypes.ReserveData)", "Pool.BRIDGE_PROTOCOL_FEE()", "IPool.configureEModeCategoryBorrowableBitmap(uint8,uint128)", "ReentrancyGuard._nonReentrantAfter()", "mUSDC.getRoleProposedTimeToClaimStakingContract()", "IncentivizedERC20._transfer(address,address,uint128)", "TriggeredSwaps.constructorTokens(address,address)", "IPool.getBorrowLogic()", "ReserveConfiguration.setBorrowCap(struct DataTypes.ReserveConfigurationMap,uint256)", "ReserveConfiguration.getParams(struct DataTypes.ReserveConfigurationMap)", "IPool.dropReserve(address)", "IStaking.getProposedUSDCAddress()", "ERC20._spendAllowance(address,address,uint256)", "ReserveConfiguration.setLiquidationBonus(struct DataTypes.ReserveConfigurationMap,uint256)", "TriggeredSwaps.claim_USDCAddress()", "Pool.supplyWithPermit(address,uint256,address,uint16,uint256,uint8,bytes32,bytes32)", "ERC20.allowance(address,address)", "IPriceOracleGetter.getAssetPrice(address)", "TriggeredSwaps.getStakingAddress()", "UserConfiguration.isEmpty(struct DataTypes.UserConfigurationMap)", "IACLManager.addBridge(address)", "PoolLogic.executeSetLiquidationGracePeriod(mapping(address => struct DataTypes.ReserveData),address,uint40)", "IPool.mintUnbacked(address,uint256,address,uint16)", "Staking.processUnstaking24Hours()", "Pool.initReserve(address,address,address,address)", "TriggeredSwaps._makeTriggerOrder(uint256)", "ReserveConfiguration.setDecimals(struct DataTypes.ReserveConfigurationMap,uint256)", "TriggeredSwaps.getUSDCAddress()", "mUSDC.cancelNewAdministratorAddress()", "Pool.getEModeCategoryCollateralBitmap(uint8)", "IPool.getReserveDataExtended(address)", "ValidationLogic.validateSetUseReserveAsCollateral(struct DataTypes.ReserveCache,uint256)", "Pool.repay(address,uint256,uint256,address)", "IPool.getLiquidationLogic()", "ReserveConfiguration.setFrozen(struct DataTypes.ReserveConfigurationMap,bool)", "PoolLogic.executeInitReserve(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),struct DataTypes.InitReserveParams)", "Pool.repayWithPermit(address,uint256,uint256,address,uint256,uint8,bytes32,bytes32)", "IStaking.getListPendingUnstaking24Hours()", "ValidationLogic.validateFlashloan(mapping(address => struct DataTypes.ReserveData),address[],uint256[])", "Staking.claim_Apy()", "IPoolAddressesProvider.getMarketId()", "SafeCast.toUint256(int256)", "ValidationLogic.validateAutomaticUseAsCollateral(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),struct DataTypes.UserConfigurationMap,struct DataTypes.ReserveConfigurationMap,address)", "PercentageMath.percentMul(uint256,uint256)", "SafeCast.toInt8(int256)", "IAToken.UNDERLYING_ASSET_ADDRESS()", "Context._msgSender()", "IPool.getReserveNormalizedVariableDebt(address)", "TriggeredSwaps.cancel_StakingAddress()", "Staking.getPendingUnstaking24Hours(address)", "mUSDC.burn(address,uint256,uint256)", "mUSDC.cancelNewStakingContractAddress()", "GPv2SafeERC20.safeTransfer(contract IERC20,address,uint256)", "IERC20Detailed.symbol()", "IERC20.transfer(address,uint256)", "IncentivizedERC20.transferFrom(address,address,uint256)", "IFlashLoanReceiver.executeOperation(address[],uint256[],uint256[],address,bytes)", "IStaking.getApy()", "WadRayMath.rayDiv(uint256,uint256)", "ReentrancyGuard._reentrancyGuardEntered()", "IPool.withdraw(address,uint256,address)", "BorrowLogic.executeBorrow(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),mapping(uint8 => struct DataTypes.EModeCategory),struct DataTypes.UserConfigurationMap,struct DataTypes.ExecuteBorrowParams)", "IPool.getPoolLogic()", "BridgeLogic.executeBackUnbacked(struct DataTypes.ReserveData,address,uint256,uint256,uint256)", "FlashLoanLogic.executeFlashLoan(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),mapping(uint8 => struct DataTypes.EModeCategory),struct DataTypes.UserConfigurationMap,struct DataTypes.FlashloanParams)", "LiquidationLogic._calculateDebt(struct DataTypes.ReserveCache,struct DataTypes.ExecuteLiquidationCallParams,uint256)", "TriggeredSwaps.createTrigger(uint256,address,uint256,uint256)", "TriggeredSwaps.claim_swapRouterAddress()", "IncentivizedERC20.decreaseAllowance(address,uint256)", "mUSDC.claimNewStakingContractAddress()", "Pool.mintUnbacked(address,uint256,address,uint16)", "Staking.getProposedApy()", "IFlashLoanSimpleReceiver.POOL()", "IPoolAddressesProvider.setPoolConfiguratorImpl(address)", "WadRayMath.rayMul(uint256,uint256)", "UserConfiguration.isUsingAsCollateralAny(struct DataTypes.UserConfigurationMap)", "Pool.repayWithATokens(address,uint256,uint256)", "IStaking.getUnstaking24HoursAdminList(address)", "WadRayMath.rayToWad(uint256)", "TriggeredSwaps.getSingleOrder(uint256)", "Pool.setLiquidationGracePeriod(address,uint40)", "ReserveConfiguration.getDebtCeiling(struct DataTypes.ReserveConfigurationMap)", "IPool.configureEModeCategory(uint8,struct DataTypes.EModeCategoryBaseConfiguration)", "ReserveConfiguration.getPaused(struct DataTypes.ReserveConfigurationMap)", "ReserveConfiguration.setPaused(struct DataTypes.ReserveConfigurationMap,bool)", "IPoolAddressesProvider.setAddressAsProxy(bytes32,address)", "IFlashLoanReceiver.ADDRESSES_PROVIDER()", "ReserveConfiguration.getLiquidationThreshold(struct DataTypes.ReserveConfigurationMap)", "Staking.getLastUnstakingProcessTime()", "IACLManager.isRiskAdmin(address)", "mUSDC.getStakingContractAddress()", "TriggeredSwaps.propose_USDCAddress(address,uint256)", "IPool.getReservesList()", "IERC20.totalSupply()", "Address.functionCallWithValue(address,bytes,uint256,string)", "IAToken.RESERVE_TREASURY_ADDRESS()", "ValidationLogic.validateRepay(struct DataTypes.ReserveCache,uint256,enum DataTypes.InterestRateMode,address,uint256)", "Pool.liquidationCall(address,address,address,uint256,bool)", "Pool.finalizeTransfer(address,address,address,uint256,uint256,uint256)", "IERC20.approve(address,uint256)", "IncentivizedERC20.constructor(contract IPool,string,string,uint8)", "WadRayMath.wadToRay(uint256)", "Pool.setConfiguration(address,struct DataTypes.ReserveConfigurationMap)", "GenericLogic.calculateAvailableBorrows(uint256,uint256,uint256)", "ERC20.balanceOf(address)", "IVariableDebtToken.UNDERLYING_ASSET_ADDRESS()", "IACLManager.removeFlashBorrower(address)", "IPool.configureEModeCategoryCollateralBitmap(uint8,uint128)", "IPool.getBridgeLogic()", "ReserveLogic._updateIndexes(struct DataTypes.ReserveData,struct DataTypes.ReserveCache)", "IncentivizedERC20.name()", "ValidationLogic.validateFlashloanSimple(struct DataTypes.ReserveData,uint256)", "Pool._onlyPoolConfigurator()", "IPriceOracleSentinel.isBorrowAllowed()", "Pool.setUserEMode(uint8)", "Pool.backUnbacked(address,uint256,uint256)", "Pool.dropReserve(address)", "IStaking.getProposedmUSDCAddress()", "IPool.supply(address,uint256,address,uint16)", "IPriceOracleSentinel.getGracePeriod()", "IPool.liquidationCall(address,address,address,uint256,bool)", "IPool.repayWithPermit(address,uint256,uint256,address,uint256,uint8,bytes32,bytes32)", "Pool.flashLoanSimple(address,address,uint256,bytes,uint16)", "Pool.getReserveNormalizedVariableDebt(address)", "ValidationLogic.validateHealthFactor(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),mapping(uint8 => struct DataTypes.EModeCategory),struct DataTypes.UserConfigurationMap,address,uint8,uint256,address)", "Staking.getProposedTimeToClaimMasterWallet()", "Pool.supply(address,uint256,address,uint16)", "IScaledBalanceToken.scaledTotalSupply()", "LiquidationLogic.executeLiquidationCall(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),mapping(address => struct DataTypes.UserConfigurationMap),mapping(uint8 => struct DataTypes.EModeCategory),struct DataTypes.ExecuteLiquidationCallParams)", "Address.verifyCallResult(bool,bytes,string)", "Staking.getmUSDCAddress()", "SafeCast.toUint224(uint256)", "IPool.getUserConfiguration(address)", "Staking.cancelPropose_mUSDCAddress()", "IStaking.getProposedTimeToClaimmUSDCAddress()", "IACLManager.removeBridge(address)", "IPool.setLiquidationGracePeriod(address,uint40)", "IAToken.nonces(address)", "ReserveConfiguration.getBorrowCap(struct DataTypes.ReserveConfigurationMap)", "IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes)", "IACLManager.removePoolAdmin(address)", "Pool.getEModeCategoryBorrowableBitmap(uint8)", "Staking.getProposedMasterWallet()", "IPool.ADDRESSES_PROVIDER()", "IPool.rescueTokens(address,address,uint256)", "TriggeredSwaps.cancel_mUSDCAddress()", "TriggeredSwaps.propose_mUSDCAddress(address,uint256)", "ValidationLogic.validateSupply(struct DataTypes.ReserveCache,struct DataTypes.ReserveData,uint256,address)", "ERC20.constructor(string,string)", "IStaking.getProposedTimeToClaimUSDCAddress()", "ReserveConfiguration.getLiquidationProtocolFee(struct DataTypes.ReserveConfigurationMap)", "IPool.BRIDGE_PROTOCOL_FEE()", "mUSDC.proposeNewStakingContractAddress(address)", "IPriceOracleSentinel.setGracePeriod(uint256)", "ReserveLogic.init(struct DataTypes.ReserveData,address,address,address)", "IPoolAddressesProvider.setPoolDataProvider(address)", "IAccessControl.grantRole(bytes32,address)", "IACLManager.setRoleAdmin(bytes32,bytes32)", "SupplyLogic.executeFinalizeTransfer(mapping(address => struct DataTypes.ReserveData),mapping(uint256 => address),mapping(uint8 => struct DataTypes.EModeCategory),mapping(address => struct DataTypes.UserConfigurationMap),struct DataTypes.FinalizeTransferParams)", "IPoolAddressesProvider.getAddress(bytes32)", "ERC20._approve(address,address,uint256,bool)"], "modifiers": ["initializer", "onlyBridge", "onlyPoolAdmin", "nonReentrant", "onlyTriggerSwaps", "onlyStakingOrTriggeredSwapsContract", "onlyUnstaking24HoursAdmin", "onlyPoolConfigurator", "onlyMasterWallet", "onlyPool", "onlyAdministrator"], "canonical_modifiers": ["Staking.onlyMasterWallet", "mUSDC.onlyStakingOrTriggeredSwapsContract", "TriggeredSwaps.onlyMasterWallet", "Pool.onlyPoolConfigurator", "Staking.onlyUnstaking24HoursAdmin", "IncentivizedERC20.onlyPoolAdmin", "IncentivizedERC20.onlyPool", "Pool.onlyPoolAdmin", "Pool.onlyBridge", "ReentrancyGuard.nonReentrant", "mUSDC.onlyAdministrator", "Staking.onlyTriggerSwaps", "VersionedInitializable.initializer"], "structs": ["ExecuteRepayParams", "AddressStructData", "ReserveCache", "FlashloanSimpleParams", "AvailableCollateralToLiquidateLocalVars", "CalculateUserAccountDataVars", "Uint24StructData", "ExactOutputSingleParams", "ExecuteWithdrawParams", "CalculateInterestRatesParams", "CollateralConfig", "FlashLoanLocalVars", "FlashLoanRepaymentParams", "EModeCategory", "ExecuteSupplyParams", "ExactOutputParams", "ReserveDataLegacy", "UintStructData", "ExactInputParams", "ExecuteLiquidationCallParams", "FinalizeTransferParams", "ValidateBorrowLocalVars", "UserData", "ExecuteBorrowParams", "ValidateBorrowParams", "ValidateLiquidationCallParams", "EModeCategoryLegacy", "ExecuteSetUserEModeParams", "EModeCategoryBaseConfiguration", "LiquidationCallLocalVars", "RoleTypeData", "ReserveData", "ValidateLiquidationCallLocalVars", "UserConfigurationMap", "Order", "ReserveConfigurationMap", "CalculateUserAccountDataParams", "ExactInputSingleParams", "UserState", "InitReserveParams", "FlashloanParams"], "canonical_structs": ["DataTypes.ExecuteSupplyParams", "DataTypes.ReserveConfigurationMap", "ISwapRouter.ExactInputParams", "mUSDC.RoleTypeData", "DataTypes.FlashloanSimpleParams", "ISwapRouter.ExactInputSingleParams", "DataTypes.ExecuteWithdrawParams", "LiquidationLogic.AvailableCollateralToLiquidateLocalVars", "DataTypes.EModeCategoryLegacy", "DataTypes.FinalizeTransferParams", "ValidationLogic.ValidateLiquidationCallLocalVars", "Staking.AddressStructData", "GenericLogic.CalculateUserAccountDataVars", "DataTypes.ValidateBorrowParams", "DataTypes.InitReserveParams", "IncentivizedERC20.UserState", "DataTypes.ReserveData", "DataTypes.CollateralConfig", "TriggeredSwaps.Uint24StructData", "DataTypes.FlashLoanRepaymentParams", "Staking.UintStructData", "DataTypes.EModeCategoryBaseConfiguration", "DataTypes.CalculateInterestRatesParams", "DataTypes.EModeCategory", "ISwapRouter.ExactOutputSingleParams", "ISwapRouter.ExactOutputParams", "ValidationLogic.ValidateBorrowLocalVars", "LiquidationLogic.LiquidationCallLocalVars", "DataTypes.ExecuteLiquidationCallParams", "DataTypes.FlashloanParams", "DataTypes.ExecuteBorrowParams", "DataTypes.CalculateUserAccountDataParams", "DataTypes.ExecuteRepayParams", "DataTypes.ReserveCache", "DataTypes.ExecuteSetUserEModeParams", "mUSDC.UserData", "DataTypes.ReserveDataLegacy", "TriggeredSwaps.AddressStructData", "DataTypes.ValidateLiquidationCallParams", "FlashLoanLogic.FlashLoanLocalVars", "DataTypes.UserConfigurationMap", "TriggeredSwaps.Order"], "user_defined_value_types": [], "canonical_user_defined_value_types": [], "variables": ["COLLATERAL_BALANCE_IS_ZERO", "FLASHLOAN_ENABLED_START_BIT_POSITION", "SLOPE_2_MUST_BE_GTE_SLOPE_1", "_status", "_incentivesController", "BORROW_CAP_MASK", "NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF", "INCONSISTENT_FLASHLOAN_PARAMS", "aavePool", "VARIABLE_DEBT_SUPPLY_NOT_ZERO", "PRICE_ORACLE_SENTINEL_CHECK_FAILED", "HALF_WAD", "DEBT_CEILING_EXCEEDED", "WITHDRAW_TO_ATOKEN", "_symbol", "VIRTUAL_ACC_START_BIT_POSITION", "_flashLoanPremiumTotal", "WAD_RAY_RATIO", "CALLER_MUST_BE_POOL", "CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN", "userData", "FLASHLOAN_DISABLED", "IS_FROZEN_START_BIT_POSITION", "StakingAddress", "MAX_VALID_LIQUIDATION_THRESHOLD", "LTV_VALIDATION_FAILED", "INVALID_DECIMALS", "lastInitializedRevision", "BORROWABLE_IN_ISOLATION_MASK", "INVALID_AMOUNT", "LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION", "MAX_VALID_SUPPLY_CAP", "OPERATION_NOT_SUPPORTED", "BORROWING_NOT_ENABLED", "RESERVE_DEBT_NOT_ZERO", "ASSET_NOT_BORROWABLE_IN_ISOLATION", "INVALID_SIGNATURE", "INVALID_EMODE_CATEGORY", "ZERO_ADDRESS_NOT_VALID", "NO_MORE_RESERVES_ALLOWED", "_totalSupply", "initializing", "_flashLoanPremiumToProtocol", "INVALID_EXPIRATION", "DECIMALS_MASK", "RESERVE_LIQUIDITY_NOT_ZERO", "INVALID_DEBT_CEILING", "INVALID_LIQUIDATION_PROTOCOL_FEE", "LIQUIDATION_BONUS_MASK", "UNBACKED_MINT_CAP_MASK", "SUPPLY_CAP_MASK", "MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD", "INVALID_FREEZE_STATE", "_usersConfig", "SUPPLY_CAP_START_BIT_POSITION", "INVALID_BURN_AMOUNT", "NOT_ENOUGH_AVAILABLE_USER_BALANCE", "POOL_ADDRESSES_DO_NOT_MATCH", "_eModeCategories", "orders", "CALLER_NOT_RISK_OR_POOL_OR_EMERGENCY_ADMIN", "manualAPY", "INVALID_FLASHLOAN_EXECUTOR_RETURN", "HALF_PERCENTAGE_FACTOR", "RESERVE_FACTOR_START_BIT_POSITION", "apy", "ADDRESSES_PROVIDER_NOT_REGISTERED", "lastUnstakingProcessTime", "COLLATERAL_CANNOT_BE_LIQUIDATED", "INCONSISTENT_PARAMS_LENGTH", "UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO", "INVALID_LIQ_BONUS", "ACL_ADMIN_CANNOT_BE_ZERO", "masterWallet", "FLASHLOAN_PREMIUM_INVALID", "DEBT_CEILING_NOT_ZERO", "administrator", "EMODE_CATEGORY_RESERVED", "DEBT_CEILING_START_BIT_POSITION", "poolFee", "MAX_VALID_RESERVE_FACTOR", "MAX_VALID_UNBACKED_MINT_CAP", "INVALID_RESERVE_PARAMS", "CALLER_NOT_BRIDGE", "INVALID_MINT_AMOUNT", "LIQUIDATION_GRACE_SENTINEL_CHECK_FAILED", "ADDRESSES_PROVIDER_ALREADY_ADDED", "VIRTUAL_ACC_ACTIVE_MASK", "LIQUIDATION_BONUS_START_BIT_POSITION", "IS_ACTIVE_START_BIT_POSITION", "COLLATERAL_CANNOT_COVER_NEW_BORROW", "COLLATERAL_SAME_AS_BORROWING_CURRENCY", "RESERVE_ALREADY_INITIALIZED", "INVALID_SUPPLY_CAP", "_usersEModeCategory", "UNDERLYING_CANNOT_BE_RESCUED", "CALLER_NOT_POOL_CONFIGURATOR", "HALF_RAY", "CALLER_NOT_POOL_OR_EMERGENCY_ADMIN", "USDCAddress", "COLLATERAL_MASK", "FROZEN_MASK", "DEBT_CEILING_MASK", "IS_PAUSED_START_BIT_POSITION", "_reserves", "NOT_ENTERED", "UNBACKED_MINT_CAP_START_BIT_POSITION", "RESERVE_FROZEN", "RESERVE_DECIMALS_START_BIT_POSITION", "MAX_RESERVES_COUNT", "_reservesCount", "firstPositiveOrderID", "NO_DEBT_OF_SELECTED_TYPE", "CALLER_NOT_POOL_ADMIN", "UNBACKED_MINT_CAP_EXCEEDED", "Unstaking24HoursAdminList", "HEALTH_FACTOR_NOT_BELOW_THRESHOLD", "HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD", "MAX_LIQUIDATION_CLOSE_FACTOR", "RESERVE_FACTOR_MASK", "CALLER_NOT_ATOKEN", "_bridgeProtocolFee", "CLOSE_FACTOR_HF_THRESHOLD", "_reservesList", "MAX_VALID_BORROW_CAP", "SUPPLY_CAP_EXCEEDED", "INVALID_BORROW_CAP", "swapRouterAddress", "BORROWING_ENABLED_START_BIT_POSITION", "RAY", "ISOLATED_COLLATERAL_SUPPLIER_ROLE", "ADDRESSES_PROVIDER", "CALLER_NOT_RISK_OR_POOL_ADMIN", "NOT_CONTRACT", "SILOED_BORROWING_VIOLATION", "triggerSwaps", "CALLER_NOT_EMERGENCY_ADMIN", "LIQUIDATION_THRESHOLD_START_BIT_POSITION", "listPendingUnstaking24Hours", "BORROWING_MASK", "FLASHLOAN_ENABLED_MASK", "MAX_VALID_LIQUIDATION_BONUS", "INVALID_ADDRESSES_PROVIDER", "INVALID_LIQ_THRESHOLD", "ENTERED", "INVALID_RESERVE_INDEX", "SILOED_BORROWING_START_BIT_POSITION", "NO_OUTSTANDING_VARIABLE_DEBT", "INVALID_UNBACKED_MINT_CAP", "UNDERLYING_BALANCE_ZERO", "BRIDGE_PROTOCOL_FEE_INVALID", "INVALID_EMODE_CATEGORY_PARAMS", "_userState", "PAUSED_MASK", "ASSET_NOT_LISTED", "__DEPRECATED_maxStableRateBorrowSizePercent", "stakingContract", "RESERVE_PAUSED", "_balances", "SUPPLY_TO_ATOKEN", "LTV_MASK", "INVALID_OPTIMAL_USAGE_RATIO", "MAX_VALID_DECIMALS", "mUSDCAddress", "INCONSISTENT_EMODE_CATEGORY", "_addressesProvider", "BORROW_CAP_START_BIT_POSITION", "POOL", "RESERVE_INACTIVE", "DEFAULT_LIQUIDATION_CLOSE_FACTOR", "whitelistedAddresses", "triggerConstructorTokens", "LIQUIDATION_THRESHOLD_MASK", "BORROWABLE_IN_ISOLATION_START_BIT_POSITION", "NOT_BORROWABLE_IN_EMODE", "MAX_VALID_LTV", "RESERVE_ALREADY_ADDED", "triggeredSwaps", "PERCENTAGE_FACTOR", "WAD", "MAX_VALID_LIQUIDATION_PROTOCOL_FEE", "INVALID_ADDRESSES_PROVIDER_ID", "SECONDS_PER_YEAR", "_allowances", "_decimals", "ACTIVE_MASK", "______gap", "USER_IN_ISOLATION_MODE_OR_LTV_ZERO", "INVALID_GRACE_PERIOD", "SILOED_BORROWING_MASK", "_name", "HEALTH_FACTOR_LIQUIDATION_THRESHOLD", "INVALID_RESERVE_FACTOR", "REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD", "pendingUnstaking24Hours", "DEBT_CEILING_DECIMALS", "INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET", "SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER", "INVALID_EMODE_CATEGORY_ASSIGNMENT", "INVALID_LTV", "INVALID_INTEREST_RATE_MODE_SELECTED", "BORROW_CAP_EXCEEDED", "INVALID_MAX_RATE", "LIQUIDATION_PROTOCOL_FEE_MASK", "MAX_VALID_DEBT_CEILING"], "canonical_variables": ["ReserveConfiguration.ACTIVE_MASK", "WadRayMath.HALF_RAY", "Errors.UNDERLYING_BALANCE_ZERO", "Staking.triggerSwaps", "ERC20._totalSupply", "Errors.DEBT_CEILING_NOT_ZERO", "TriggeredSwaps.swapRouterAddress", "ReserveConfiguration.LIQUIDATION_THRESHOLD_MASK", "ReserveConfiguration.RESERVE_FACTOR_MASK", "ReserveConfiguration.UNBACKED_MINT_CAP_START_BIT_POSITION", "Errors.INVALID_DEBT_CEILING", "Errors.CALLER_NOT_RISK_OR_POOL_ADMIN", "VersionedInitializable.initializing", "Errors.INVALID_ADDRESSES_PROVIDER_ID", "Errors.ASSET_NOT_LISTED", "ValidationLogic.MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD", "Pool.ADDRESSES_PROVIDER", "Errors.INVALID_RESERVE_INDEX", "Errors.LIQUIDATION_GRACE_SENTINEL_CHECK_FAILED", "UserConfiguration.BORROWING_MASK", "ReserveConfiguration.MAX_VALID_LIQUIDATION_PROTOCOL_FEE", "ReserveConfiguration.BORROWING_ENABLED_START_BIT_POSITION", "Staking.mUSDCAddress", "ReserveConfiguration.IS_FROZEN_START_BIT_POSITION", "ReserveConfiguration.MAX_VALID_LIQUIDATION_BONUS", "Errors.RESERVE_LIQUIDITY_NOT_ZERO", "Errors.HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD", "LiquidationLogic.MAX_LIQUIDATION_CLOSE_FACTOR", "TriggeredSwaps.poolFee", "Errors.NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF", "Errors.ZERO_ADDRESS_NOT_VALID", "ReserveConfiguration.SILOED_BORROWING_MASK", "ERC20._balances", "Staking.apy", "PoolStorage._bridgeProtocolFee", "mUSDC.administrator", "ReserveConfiguration.MAX_VALID_LIQUIDATION_THRESHOLD", "PercentageMath.PERCENTAGE_FACTOR", "Errors.INVALID_EMODE_CATEGORY", "PoolStorage._reserves", "ReserveConfiguration.LIQUIDATION_THRESHOLD_START_BIT_POSITION", "Errors.NOT_BORROWABLE_IN_EMODE", "PoolStorage._usersConfig", "ReserveConfiguration.MAX_VALID_DECIMALS", "Staking.aavePool", "ReserveConfiguration.SILOED_BORROWING_START_BIT_POSITION", "ReserveConfiguration.DEBT_CEILING_DECIMALS", "Errors.WITHDRAW_TO_ATOKEN", "Errors.UNBACKED_MINT_CAP_EXCEEDED", "WadRayMath.HALF_WAD", "ValidationLogic.ISOLATED_COLLATERAL_SUPPLIER_ROLE", "WadRayMath.RAY", "ReserveConfiguration.MAX_RESERVES_COUNT", "TriggeredSwaps.StakingAddress", "WadRayMath.WAD_RAY_RATIO", "Errors.VARIABLE_DEBT_SUPPLY_NOT_ZERO", "Staking.listPendingUnstaking24Hours", "IncentivizedERC20._name", "ReserveConfiguration.VIRTUAL_ACC_ACTIVE_MASK", "Errors.SUPPLY_CAP_EXCEEDED", "MathUtils.SECONDS_PER_YEAR", "PoolStorage._reservesCount", "TriggeredSwaps.orders", "Staking.USDCAddress", "ReserveConfiguration.LIQUIDATION_BONUS_START_BIT_POSITION", "ReserveConfiguration.BORROWING_MASK", "PoolStorage._flashLoanPremiumToProtocol", "Errors.INVALID_INTEREST_RATE_MODE_SELECTED", "Errors.ACL_ADMIN_CANNOT_BE_ZERO", "ReserveConfiguration.DECIMALS_MASK", "Errors.INVALID_BORROW_CAP", "Errors.DEBT_CEILING_EXCEEDED", "IncentivizedERC20._decimals", "ReentrancyGuard.ENTERED", "Errors.RESERVE_FROZEN", "Errors.NOT_ENOUGH_AVAILABLE_USER_BALANCE", "mUSDC.userData", "ReserveConfiguration.LIQUIDATION_BONUS_MASK", "Errors.RESERVE_PAUSED", "mUSDC.masterWallet", "TriggeredSwaps.mUSDCAddress", "ReentrancyGuard._status", "IncentivizedERC20.POOL", "Errors.ADDRESSES_PROVIDER_NOT_REGISTERED", "ReserveConfiguration.MAX_VALID_BORROW_CAP", "Errors.INVALID_MINT_AMOUNT", "PoolStorage._eModeCategories", "ReserveConfiguration.DEBT_CEILING_MASK", "Errors.PRICE_ORACLE_SENTINEL_CHECK_FAILED", "mUSDC.manualAPY", "Errors.CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN", "Staking.Unstaking24HoursAdminList", "Errors.CALLER_MUST_BE_POOL", "Errors.RESERVE_INACTIVE", "Errors.SILOED_BORROWING_VIOLATION", "IncentivizedERC20._incentivesController", "ReserveConfiguration.FROZEN_MASK", "Errors.CALLER_NOT_BRIDGE", "Errors.CALLER_NOT_EMERGENCY_ADMIN", "ReserveConfiguration.VIRTUAL_ACC_START_BIT_POSITION", "ReserveConfiguration.LTV_MASK", "Errors.INVALID_DECIMALS", "Errors.LTV_VALIDATION_FAILED", "Staking.pendingUnstaking24Hours", "PercentageMath.HALF_PERCENTAGE_FACTOR", "ReserveConfiguration.DEBT_CEILING_START_BIT_POSITION", "LiquidationLogic.DEFAULT_LIQUIDATION_CLOSE_FACTOR", "UserConfiguration.COLLATERAL_MASK", "Errors.FLASHLOAN_PREMIUM_INVALID", "ReserveConfiguration.RESERVE_DECIMALS_START_BIT_POSITION", "ReserveConfiguration.MAX_VALID_DEBT_CEILING", "Errors.ASSET_NOT_BORROWABLE_IN_ISOLATION", "Errors.BORROW_CAP_EXCEEDED", "Errors.INVALID_AMOUNT", "Errors.BRIDGE_PROTOCOL_FEE_INVALID", "PoolStorage._flashLoanPremiumTotal", "ValidationLogic.REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD", "Errors.NO_OUTSTANDING_VARIABLE_DEBT", "IncentivizedERC20._userState", "Errors.INVALID_UNBACKED_MINT_CAP", "Errors.INVALID_MAX_RATE", "ReserveConfiguration.IS_ACTIVE_START_BIT_POSITION", "Errors.SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER", "ReserveConfiguration.FLASHLOAN_ENABLED_MASK", "ReserveConfiguration.MAX_VALID_SUPPLY_CAP", "Errors.POOL_ADDRESSES_DO_NOT_MATCH", "Errors.SLOPE_2_MUST_BE_GTE_SLOPE_1", "Errors.INVALID_LTV", "IncentivizedERC20._symbol", "Errors.CALLER_NOT_POOL_ADMIN", "ReserveConfiguration.BORROWABLE_IN_ISOLATION_START_BIT_POSITION", "Errors.COLLATERAL_SAME_AS_BORROWING_CURRENCY", "ReserveConfiguration.UNBACKED_MINT_CAP_MASK", "ReserveConfiguration.IS_PAUSED_START_BIT_POSITION", "Errors.CALLER_NOT_ATOKEN", "Errors.CALLER_NOT_RISK_OR_POOL_OR_EMERGENCY_ADMIN", "Errors.BORROWING_NOT_ENABLED", "Errors.INVALID_SUPPLY_CAP", "PoolStorage.__DEPRECATED_maxStableRateBorrowSizePercent", "Errors.INVALID_ADDRESSES_PROVIDER", "ReserveConfiguration.SUPPLY_CAP_START_BIT_POSITION", "Errors.COLLATERAL_BALANCE_IS_ZERO", "ReserveConfiguration.LIQUIDATION_PROTOCOL_FEE_MASK", "TriggeredSwaps.masterWallet", "Errors.NOT_CONTRACT", "ReserveConfiguration.PAUSED_MASK", "ReserveConfiguration.MAX_VALID_RESERVE_FACTOR", "Errors.HEALTH_FACTOR_NOT_BELOW_THRESHOLD", "ReserveConfiguration.BORROW_CAP_MASK", "Staking.lastUnstakingProcessTime", "Errors.INVALID_RESERVE_PARAMS", "Errors.INVALID_FLASHLOAN_EXECUTOR_RETURN", "VersionedInitializable.lastInitializedRevision", "Errors.NO_DEBT_OF_SELECTED_TYPE", "ReserveConfiguration.SUPPLY_CAP_MASK", "Errors.INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET", "Errors.INCONSISTENT_FLASHLOAN_PARAMS", "mUSDC.stakingContract", "TriggeredSwaps.firstPositiveOrderID", "Errors.INVALID_EXPIRATION", "Errors.EMODE_CATEGORY_RESERVED", "Errors.COLLATERAL_CANNOT_BE_LIQUIDATED", "Errors.INVALID_GRACE_PERIOD", "ERC20._allowances", "mUSDC.mUSDCAddress", "Errors.RESERVE_DEBT_NOT_ZERO", "Errors.CALLER_NOT_POOL_OR_EMERGENCY_ADMIN", "TriggeredSwaps.USDCAddress", "TriggeredSwaps.triggerConstructorTokens", "ValidationLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD", "Errors.SUPPLY_TO_ATOKEN", "Errors.UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO", "Errors.INVALID_RESERVE_FACTOR", "Errors.INCONSISTENT_PARAMS_LENGTH", "WadRayMath.WAD", "ReserveConfiguration.MAX_VALID_LTV", "Errors.INVALID_SIGNATURE", "PoolStorage._usersEModeCategory", "Errors.FLASHLOAN_DISABLED", "IncentivizedERC20._totalSupply", "Errors.CALLER_NOT_POOL_CONFIGURATOR", "Errors.INVALID_LIQ_THRESHOLD", "Errors.RESERVE_ALREADY_INITIALIZED", "PoolStorage._reservesList", "ERC20._symbol", "mUSDC.triggeredSwaps", "Errors.INVALID_LIQ_BONUS", "ReserveConfiguration.BORROW_CAP_START_BIT_POSITION", "ReserveConfiguration.LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION", "mUSDC.whitelistedAddresses", "Errors.INVALID_EMODE_CATEGORY_PARAMS", "Errors.INCONSISTENT_EMODE_CATEGORY", "Errors.INVALID_LIQUIDATION_PROTOCOL_FEE", "Errors.RESERVE_ALREADY_ADDED", "ReserveConfiguration.FLASHLOAN_ENABLED_START_BIT_POSITION", "ReserveConfiguration.MAX_VALID_UNBACKED_MINT_CAP", "ReentrancyGuard.NOT_ENTERED", "ERC20._name", "Errors.USER_IN_ISOLATION_MODE_OR_LTV_ZERO", "Errors.OPERATION_NOT_SUPPORTED", "Errors.ADDRESSES_PROVIDER_ALREADY_ADDED", "Staking.masterWallet", "ReserveConfiguration.BORROWABLE_IN_ISOLATION_MASK", "Errors.UNDERLYING_CANNOT_BE_RESCUED", "VersionedInitializable.______gap", "Errors.INVALID_OPTIMAL_USAGE_RATIO", "IncentivizedERC20._addressesProvider", "LiquidationLogic.CLOSE_FACTOR_HF_THRESHOLD", "Errors.INVALID_FREEZE_STATE", "IncentivizedERC20._allowances", "Errors.INVALID_EMODE_CATEGORY_ASSIGNMENT", "Errors.NO_MORE_RESERVES_ALLOWED", "Errors.INVALID_BURN_AMOUNT", "Errors.COLLATERAL_CANNOT_COVER_NEW_BORROW", "ReserveConfiguration.RESERVE_FACTOR_START_BIT_POSITION"]}